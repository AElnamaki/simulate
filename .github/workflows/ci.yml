name: Blockchain Dev Suite CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install Node.js dependencies
      run: |
        npm ci
        npm install -g ganache-cli@latest
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run provisioning script
      run: |
        chmod +x provision.sh
        # Mock RHEL environment on Ubuntu
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get install -y python3-venv
        ./provision.sh
        
    - name: Lint Solidity contracts
      run: |
        npm run lint
        
    - name: Run security analysis
      run: |
        # Install slither
        pip install slither-analyzer
        # Run slither analysis
        slither contracts/ --json slither-report.json || true
        
    - name: Start Ganache
      run: |
        ./scripts/start_ganache.sh &
        sleep 10
        
    - name: Compile contracts
      run: |
        npm run compile
        
    - name: Deploy contracts
      run: |
        source venv/bin/activate
        python deploy.py --ganache-url http://localhost:8545
        
    - name: Run Solidity tests
      run: |
        npm test
        
    - name: Run Python tests
      run: |
        source venv/bin/activate
        python -m pytest tests/python/ -v --tb=short
        
    - name: Run simulation
      run: |
        source venv/bin/activate
        python simulator/run_simulation.py --steps 10 --delay 0.1
        
    - name: Generate test report
      run: |
        source venv/bin/activate
        python -m pytest tests/python/ --junitxml=test-report.xml --cov=simulator --cov-report=xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.python-version }}
        path: |
          test-report.xml
          coverage.xml
          deployed.json
          simulation_results_*.json
          step_metrics_*.csv
          agent_performance_*.csv
          slither-report.json
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: codecov-umbrella
        
    - name: Stop Ganache
      if: always()
      run: |
        ./scripts/stop_ganache.sh || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        npm ci
        npm install -g ganache-cli@latest
        pip install -r requirements.txt
        
    - name: Run provisioning
      run: |
        chmod +x provision.sh
        ./provision.sh
        
    - name: Start Ganache
      run: |
        ./scripts/start_ganache.sh &
        sleep 10
        
    - name: Deploy contracts
      run: |
        source venv/bin/activate
        python deploy.py
        
    - name: Run extended simulation
      run: |
        source venv/bin/activate
        python simulator/run_simulation.py --steps 100
        
    - name: Package artifacts
      run: |
        mkdir -p artifacts
        cp deployed.json artifacts/
        cp simulation_results_*.json artifacts/ || true
        cp step_metrics_*.csv artifacts/ || true
        cp agent_performance_*.csv artifacts/ || true
        tar -czf blockchain-dev-suite-artifacts.tar.gz artifacts/
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: blockchain-dev-suite-artifacts.tar.gz
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install slither-analyzer mythril
        npm install -g @crytic/echidna
        
    - name: Run Slither analysis
      run: |
        slither contracts/ --json slither-results.json || true
        
    - name: Run Mythril analysis
      run: |
        cd contracts
        for file in *.sol; do
          echo "Analyzing $file..."
          myth analyze "$file" --output json > "../mythril-$file.json" || true
        done
        cd ..
        
    - name: Check for known vulnerabilities
      run: |
        # Custom vulnerability checks
        echo "Running custom vulnerability checks..."
        
        # Check for reentrancy guards
        grep -r "nonReentrant\|ReentrancyGuard" contracts/ || echo "Warning: No reentrancy protection found"
        
        # Check for safe math usage
        grep -r "SafeMath\|unchecked" contracts/ || echo "Warning: No explicit safe math usage"
        
        # Check for access controls
        grep -r "onlyOwner\|Ownable\|AccessControl" contracts/ || echo "Warning: No access controls found"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          slither-results.json
          mythril-*.json